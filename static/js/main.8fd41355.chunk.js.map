{"version":3,"sources":["context/context.js","reducer/reducer.js","api/index.js","components/Form/Form.js","components/Booking/Booking.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","airline","countries","selectedAirline","selectedCountry","reducer","state","action","type","payload","URL","defaultQuery","method","headers","api","ep","query","options","parsedQuery","JSON","stringify","fetch","then","response","status","ok","Error","json","Form","useContext","dispatch","useEffect","data","onSelectChange","e","target","name","value","className","placeholder","onChange","id","map","item","key","country","Booking","useState","creating","bookState","setState","onClick","book","setTimeout","body","disabled","role","aria-hidden","App","initialState","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fd41355.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext({\r\n  airline: [],\r\n  countries: [],\r\n  selectedAirline: null,\r\n  selectedCountry: null\r\n});\r\n\r\nexport default Context;","export default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'FETCH_COUNTRES':\r\n      return {\r\n        ...state,\r\n        countries: action.payload\r\n      }\r\n    case 'FETCH_AIRLINES':\r\n      return {\r\n        ...state,\r\n        airline: action.payload\r\n      }\r\n    case 'SELECT_AIRLINE':\r\n      return {\r\n        ...state,\r\n        selectedAirline: action.payload\r\n      }\r\n    case 'SELECT_COUNTRY':\r\n      return {\r\n        ...state,\r\n        selectedCountry: action.payload\r\n      }    \r\n    default:\r\n      return state;\r\n  }\r\n}","const URL = 'https://it-blog-posts.herokuapp.com/api/'\r\nconst defaultQuery = {\r\n  method: 'GET',\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n}\r\n \r\nexport default function api(ep = '', query = null, options = {}) {\r\n  const parsedQuery = query ? JSON.stringify(query) : ''\r\n  return fetch(`${URL}${ep}?filter=${parsedQuery}`, {\r\n    ...defaultQuery,\r\n    ...options\r\n  }).then((response) => {\r\n    if (response.status !== 200 && !response.ok) {\r\n      throw new Error('something went wrong please try again later');\r\n    }\r\n    return response.json()\r\n  })\r\n}","import React, { useEffect, useContext } from 'react';\r\nimport Context from '../../context/context'\r\nimport api from '../../api';\r\n\r\nconst Form = () => {\r\n  const { state, dispatch } = useContext(Context);\r\n  const { airline, countries } = state;\r\n\r\n  useEffect(() => {\r\n    api('airline').then((data) => {\r\n      dispatch({ type: 'FETCH_AIRLINES', payload: data })\r\n    })\r\n    api('countries').then((data) => {\r\n      dispatch({ type: 'FETCH_COUNTRES', payload: data })\r\n    })\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const onSelectChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'airline') {\r\n      dispatch({type: 'SELECT_AIRLINE', payload: value })\r\n    } else {\r\n      dispatch({type: 'SELECT_COUNTRY', payload: value })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"input-group mb-3\">\r\n        <select name='country' placeholder='Select the Country' onChange={onSelectChange} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n          <option value=''></option>\r\n         {airline.map((item) => {\r\n           return <option key={item.id} value={item.airline}>{item.airline}</option>\r\n         })}\r\n        </select>\r\n     </div>\r\n     <div className=\"input-group mb-3\">\r\n        <select name='airline' onChange={onSelectChange} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n          <option value=''></option>\r\n          {countries.map((item) => {\r\n           return <option key={item.id} value={item.country}>{item.country}</option>\r\n          })}\r\n        </select>\r\n     </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;","import React, { useContext, useState } from 'react';\r\nimport Context from '../../context/context'\r\nimport api from '../../api';\r\n\r\nconst Booking = () => {\r\n  const { state } = useContext(Context);\r\n  const [bookState, setState] = useState({ creating: false, response: null })\r\n  const { creating, response } = bookState\r\n  const { selectedAirline, selectedCountry } = state;\r\n\r\n  const onBookTicket = () => {\r\n    setState({\r\n      ...bookState,\r\n      response: null,\r\n      creating: true\r\n    })\r\n    const book = {\r\n      country: selectedCountry,\r\n      airline: selectedAirline,\r\n    }\r\n    setTimeout(() => {\r\n      api('bookings', null, { method: 'POST', body: JSON.stringify(book) })\r\n        .then((data) => {\r\n          setState({\r\n            ...bookState,\r\n            response: data,\r\n            creating: false\r\n          })\r\n        })\r\n    },1000)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n     {!response && (\r\n      <button \r\n        type=\"button\" \r\n        onClick={onBookTicket}\r\n        disabled={!selectedAirline || !selectedCountry} \r\n        className={`btn ${creating ? 'btn-warning' : 'btn-secondary'}`}\r\n      >\r\n        {creating && (\r\n          <>\r\n          <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n          Loading...\r\n          </>\r\n        )}\r\n        {!creating && 'Book a ticket'}\r\n      </button>\r\n     )} \r\n      {response && (\r\n        <span><b>Booked:</b> {response.country}: <i>{response.airline}</i> </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Booking;","import React, { useReducer, useContext } from 'react';\r\nimport Context from './context/context';\r\nimport reducer from './reducer/reducer'\r\nimport Form from './components/Form/Form';\r\nimport Booking from './components/Booking/Booking';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  const initialState = useContext(Context)\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  return (\r\n    <Context.Provider value={{state, dispatch}}>\r\n      <div className='container app'>\r\n        <Form />\r\n        <Booking />\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}